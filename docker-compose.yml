version: '3.8'

services:
  # Main IRCTC Bot Application
  irctc-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: irctc-tatkal-bot
    ports:
      - "5000:5000"
    environment:
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - DEBUG=${DEBUG:-False}
      - HOST=0.0.0.0
      - PORT=5000
      - ENVIRONMENT=production
      - PLAYWRIGHT_HEADLESS=True
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-encryption-key-32-characters!}
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
      - ./temp:/app/temp
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - irctc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: irctc-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-myredispassword}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - irctc-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: irctc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
    depends_on:
      - irctc-bot
    restart: unless-stopped
    networks:
      - irctc-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database (SQLite is used by default, but PostgreSQL option available)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: irctc-postgres
  #   environment:
  #     POSTGRES_DB: ${DB_NAME:-irctc_bot}
  #     POSTGRES_USER: ${DB_USER:-irctc_user}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-irctc_password}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - irctc-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-irctc_user} -d ${DB_NAME:-irctc_bot}"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: irctc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - irctc-network
    profiles:
      - monitoring

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: irctc-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - irctc-network
    profiles:
      - monitoring

  # Log aggregation with ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: irctc-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - irctc-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: irctc-logstash
    volumes:
      - ./deploy/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - irctc-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: irctc-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - irctc-network
    profiles:
      - logging

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Network configuration
networks:
  irctc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16